#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8

set +x

if test -d ~/Developement/antiqua ; then
  rm -rf ~/Developement/antiqua/build-antiquacrm-*
  find ~/Developement/antiqua -type f -name "*~" -exec rm -v "{}" \;
fi

function __clean_logs()
{
  ## Open Collaboration Service
  if test -d $HOME/.cache/antiquacrm ; then
    rm -rf $HOME/.cache/antiquacrm
    mkdir -p $HOME/.cache/antiquacrm
  fi
  ## Plugins
  rm -f $HOME/.cache/{booklooker,whsoft,abebooks}_*.xml
  ## Tempfiles
  rm -f /tmp/antiqua_*.json
  rm -f /tmp/antiqua_*.log
}

function __check_sub_project()
{
  local _f=${1:-"."}/CMakeLists.txt
  if test -s ${_f} ; then
    grep -e '_subproject\b\s\+\"' ${_f} | cut -d'"' -f2
  fi
}

function __create_header_subs()
{
  _scope=${1:-"failed"}
  _dest=${2:-"failed"}
  _namespace=""
  if test -n "$3" ; then
    _namespace="$(echo $3 | awk '{print toupper($1)}')_"
  fi
  _module=$(echo ${_scope} | awk '{print toupper($1)}')
  if test -d ${_dest} ; then
  pushd ${_dest}
  cat > ${_scope} <<EOF
// -*- coding: utf-8 -*-
// vim: set fileencoding=utf-8

/**
 * @defgroup ${_scope}
 * @{
 */

EOF
    for _h in $(ls *.h | sort) ; do
      _class=$(echo ${_h} | sed 's,\.h,,' | awk '{print toupper($1)}')
  cat >> ${_scope} <<EOF
#ifndef ${_namespace}${_class}_${_module}_H
# include "${_h}"
#endif

EOF
    done
  cat >> ${_scope} <<EOF
/** @} */
EOF
  popd
  fi
}

# echo "# Build Sub Header Processing"
__create_header_subs Utils custom/utils
__create_header_subs Imaging custom/imaging
__create_header_subs SqlCore core/sqlcore HJCMS

echo "# CMAKE Targets" > CMakeSubTargets.cmake

declare -a _buffer=();

for _t in $(find . -mindepth 1 -type f -name CMakeLists.txt -exec dirname "{}" \;) ; do
if test -e ${_t}/CMakeLists.txt ; then
  _t=$(echo ${_t} | sed 's,\.\/,,')
  if test ${_t} != . ; then
    _buffer+=(${_t})
  fi
fi
done

cat > CMakeSubTargets.cmake <<EOF
##
# Generated by $0
##
SET (PROJECT_INCLUDE_DIRS
 \${PROJECT_INCLUDE_DIRS}
EOF

uniqs_arr=($(for _i in "${_buffer[@]}"; do echo "${_i}"; done | sort -u))

for _t in ${uniqs_arr[@]}  ; do
cat >> CMakeSubTargets.cmake <<EOF
 \${CMAKE_CURRENT_BINARY_DIR}/${_t}
 \${CMAKE_CURRENT_SOURCE_DIR}/${_t}
EOF
done

cat >> CMakeSubTargets.cmake <<EOF
)

INCLUDE_DIRECTORIES (\${PROJECT_INCLUDE_DIRS})

EOF

for _s in $(find . -mindepth 1 -maxdepth 3 -type f -name CMakeLists.txt -exec dirname "{}" \;) ; do
if test ! -n "$(grep _subproject ${_s}/CMakeLists.txt 2> /dev/null)" ; then
  _s=$(echo ${_s} | sed 's,\.\/,,')
  ## Plugins nicht in das Projekt laden
  if [[ "${_s}" = "plugins/antiqua" ]] ; then
    continue;
  fi
  ## Plugins nicht in das Projekt laden
  if [[ "${_s}" = "custom/libextern" ]] ; then
    continue;
  fi
  if test ${_s} != . ; then
  cat >> CMakeSubTargets.cmake <<EOF
ADD_SUBDIRECTORY (${_s})
EOF
  fi
fi
done

cat >> CMakeSubTargets.cmake <<EOF

SET(_link_sub_libs
EOF

for _s in $(find . -mindepth 2 -type f -name CMakeLists.txt -exec dirname "{}" \;) ; do
  if test -n "$(grep ADD_LIBRARY ${_s}/CMakeLists.txt)" ; then
    __check_sub_project ${_s} >> CMakeSubTargets.cmake
  fi
done

cat >> CMakeSubTargets.cmake <<EOF
)

EOF

__clean_logs

##
## EOF
