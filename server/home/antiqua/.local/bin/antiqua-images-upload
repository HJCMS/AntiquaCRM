#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8
##################################################################################
# This file is part of the HJCMS Project
#
# Copyright (C) Juergen Heinemann http://www.hjcms.de, (C) 2007-2022
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
##################################################################################

use strict;
use warnings;
use POSIX qw(strftime);
use Directory::Iterator;
use File::Basename;
use File::Copy;
use File::Glob qw(:globally :nocase);
use MIME::Base64 qw(encode_base64);

binmode STDOUT, ":utf8";

=encoding utf8
=begin text

  antiqua-images-upload

  Script für einen Cron Job zum erstellen und Hochladen der Bildedaten im Zipformat.

  Ablauf:
    1) Erstelle ein Temporäres Verzeichnis mit den Bilddateien die gepackt werden sollen.
    2) Kopiere die Bilder in das Temporäre Verzeichnis.
    3) Verschiebe die Originale in das Quellenverzeichnis.
    4) Packe die Bilder in eine Zipdatei und erstelle eine Jobdatei
    5) Mit der Jobdatei und curl die Bilder hochladen!

=cut

########################################################################
## BEGIN Configuration

my $_HOMEDIR = $ENV{"HOME"};

## Standard Bilder Verzeichnis
my $_IMAGES_DIR = "";

## Lese neue Bilder von Verzeichnis. Es wird kein Rekursives lesen verwendet!
my $_SCAN_DIR = "${_IMAGES_DIR}/";

## Das Ziel Verzeichnis wird mit "set_source_target" erzeugt!
my $_OUTPUT_DIR = "";

## Temoräres Speicher Verzeichnis
my $_CACHE_DIR = "${_HOMEDIR}/.cache/";

## Temporäres Zip-Verzeichnis
my $_ZIP_DIR = "${_CACHE_DIR}/antiqua_zip_images";

## Die erstellte Zipdatei wird hierhin abgelegt ...
my $_ZIP_TARGET = "/home/HJCMS/AntiquaCRM/Archiv/ZipDateien";

## Ist der Suffix mit der Datumsangabe für die Ausgabe Datei.
my $_DATE_STRING = strftime "%Y%m%d", localtime;

## END configuration
########################################################################

# Methode zum erstellen des Ablageverzeichnisses für die Quellbilder.
sub set_source_target {
  my $_target = "";
  my $_subdir = strftime "%Y/%m", localtime();
  my $_destdir = sprintf("%s/%s", ${_IMAGES_DIR}, $_subdir);
  if (-e ${_IMAGES_DIR}) {
    mkdir ($_destdir);
    if(-e $_destdir) {
      $_target = $_destdir;
    }
  } else {
    print "Fatal: Directory (${_IMAGES_DIR}) not exists!\n";
  }
  return $_target;
}

## Bilddaten für das packen Vorbereiten.
sub create_zip_folder {
  ## Starte Scan
  my $it = Directory::Iterator->new(${_SCAN_DIR}, show_dotfiles=>0, recursive=>0, show_directories=>0);
  while (my $file = <$it>) {
    my $_f = basename($file);
    if ($_f =~ qr/^\d{1,8}\.jp[e]*g$/i) {
      $_f =~ s/\.jp[e]*g$//g;
      my $_t = sprintf ("%d.JPG", int($_f));
      copy ("${file}", "${_ZIP_DIR}/${_t}");
      copy ("${file}", "${_OUTPUT_DIR}/");
      ## move ("${file}", "${_OUTPUT_DIR}/");
    }
  }
}

## Erstelle eine Upload-Job Datei
sub create_upload_job {
  my $_filepath = shift;
  if(-e $_filepath) {
    open(FH, '>:encoding(UTF-8)', "${_CACHE_DIR}/UPLOAD-IMAGES_${DATE_STRING}.job") or die $!;
    print FH  $_filepath . "\n";
    close(FH);
    return 0;
  } else {
    print "File $_filepath not exists!\n";
    return 1;
  }
}

## Erstelle das Zip Paket
sub create_zip_package {
  my $status = 1;
  if(-e ${_ZIP_DIR}) {
    chdir (${_ZIP_DIR});
    my @images = glob("*.JPG");
    if(@images == 0)
    {
      print "No Images, nothing todo!\n";
      return 0;
    }
    ## Berichtigungen prüfen/anpassen
    chmod (0644, @images);
    ## Ist ein altes Zipdpaket vorhanden?
    if (-e bilder-${_DATE_STRING}.zip) {
      move ("bilder-${_DATE_STRING}.zip", "${_CACHE_DIR}/");
    }
    ## Erstelle neues Paket
    my $_file = "bilder-${_DATE_STRING}.zip";
    my @args = ("zip", "-9", "-q", "-o", "$_file", @images);
    $status = system(@args);
    if ($status == 0) {
      move ("$_file", "${_ZIP_TARGET}/");
      create_upload_job("${_ZIP_TARGET}/$_file");
    }
    unlink (@images);
  }
  return $status;
};

## Erstelle Quellen Ziel Verzeichnis
${_OUTPUT_DIR} = set_source_target();

if(-e ${_OUTPUT_DIR}) {
  ## Erstelle Temporären Zip Ordner
  system("mkdir -p ${_ZIP_DIR}");

  ## Scanne Bilder
  if (create_zip_folder() == 0) {
    create_zip_package();
  }
} else {
  print "Build bilder-${_DATE_STRING}.zip failed!\n";
  exit(1);
}

##EOF
