#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8
########################################################################################
# This file is part of the HJCMS Project
#
# Copyright (C) Juergen Heinemann http://www.hjcms.de, (C) 2007-2022
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
########################################################################################
# upload_zipimage

set +x

_zipfile="${1:-"NO_ZIPFILE_ADD"}"

if test ! -e ${_zipfile} ; then
  echo "Missing Zipfile ..."
  echo " $PWD ${_zipfile} "
  exit 1
fi

test -e $HOME/.config/postgres/servercfg.bash || {
  echo "FATAL: Can not read Configuration"
  exit 1
}

chmod -c 0600 $HOME/.config/postgres/servercfg.bash

source $HOME/.config/postgres/servercfg.bash

if test ! -d ${_zipfiles_target} ; then
  echo "Missing ZipFiles target"
  exit 1
fi

# Standard Ausgabename für Temporäre Daten in ~/.cache erstellen!
_tempdir=$HOME/.cache

pushd ${_zipfiles_target}
  ## Upload
  _whsoft_apiKey="3fbe2f84-1ae2-419e-b5c4-fecabd6bac6c"
  _whsoft_remote="https://www.buchfreund.de/verkaeufer/api/${_whsoft_apiKey}/upload-bilder"
  curl --silent \
    --ssl-reqd \
    --tlsv1.2 \
    -X POST "${_whsoft_remote}" \
    -H "Accept: */*" \
    -H "Cache-Control: no-cache" \
    -H "Content-Type: multipart/form-data" \
    -F "boundary=upload" \
    -F "file=@${_zipfile}" \
    --dump-header ${_tempdir}/image_upload_dump.header \
    --output ${_tempdir}/image_upload_.json

  if test $? -ne 0 ; then
    echo "Curl finished with errors!"
    echo "Check: ${_tempdir}/image_upload_.json"
    exit 1
  fi
popd
