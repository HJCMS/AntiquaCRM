#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8
##################################################################################
# This file is part of the HJCMS Project
#
# Copyright (C) Juergen Heinemann http://www.hjcms.de, (C) 2007-2022
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
##################################################################################

use strict;
use warnings;
use DBD::Pg;
use XML::LibXML;
use Text::Iconv;

=encoding utf8
=begin text

  antiqua-update-abebooks

  Das Script ist für einen Cronjob gedacht, der täglich die Änderungen and den
  Abebooks "Inventoryupdate" Server sendet.

  Es wird mit PostgreSQL abgefragt welche Einträge sich an diesem Tag geändert haben.
  Diese Datensätze werden gesammelt und an den "Inventoryupdate" Server gesendet.

  Die Datenbank arbeitet mit UTF-8 aber Abebooks erwartet ISO-8859-1.
  Dehalb muss die Ausgabe in den richtigen Zeichensatz konvertiert werden!

  Die Abhängigkeiten für dieses Script sind:
    perl-DBD-Pg >= 2.19
    perl-XML-LibXML >= 2.0018
    curl >= 7.29.0
    perl-Text-Iconv >= 1.7

=cut text

########################################################################
## BEGIN configuration
## Alle Einstellungen für die Server Zugriffe
## API Login/Benutzer
my $_API_USER = "";

## API Key - Authentifizierung
my $_API_KEY = "";

## Standard Ausgabename für Log- und XML-Dateien
my $_APPL_NAME = "antiqua-abebooks-update";

## PostgreSQL Service/Benutzername
## https://www.postgresql.org/docs/current/libpq-pgservice.html
my $_PG_USER = "";

## XML Ausgabe Zeichensatz
## WARNING AbeBooks kann nicht mit UTF-8 umgehen!
my $_XML_CHARSET = "ISO-8859-1";

## Schreibe LOGS in ...
my $_CACHE_DIR = $ENV{HOME} . "/.cache/";

## Schreibe Antwort XML in ...
my $_OUTPUT_DIR = $ENV{HOME} . "/.cache/";

## Lese PgSQL Abfrage aus Datei
my $_SQL_QUERY = $ENV{HOME} . "/.config/HJCMS/${_APPL_NAME}.sql";

## Standard URL für Bilderupdate
my $_PICTURE_URL = "https://www.hjcms.de/covers/";

## END configuration
########################################################################

if (!$_API_KEY or !$_API_USER) {
  print "Configure first!\n";
  exit(0);
}

## Sende die POST Daten an "inventoryupdate.abebooks.com:10027" Server!
sub postUpdate {
  my $body = shift;
  my @args = ("curl", "--silent", "--show-error", "--ipv4", "--ssl-reqd", "--tlsv1.2",
    "--request", "POST", "https://inventoryupdate.abebooks.com:10027",
    "--header", "Accept-Language: de;q=0.8, en;q=0.7",
    "--header", "Accept: application/xml,text/*;q=0.1",
    "--header", "Content-Type: application/xml; charset=$_XML_CHARSET",
    "--header", "Cache-Control: no-cache",
    "--trace", "${_CACHE_DIR}/${_APPL_NAME}_trace.log",
    "--dump-header", "${_CACHE_DIR}/${_APPL_NAME}_header.log",
    "--output", "${_OUTPUT_DIR}/${_APPL_NAME}_reply.xml",
    "--data", "$body"
  );
  if (system(@args) != 0) {
    print "Curl finished with errors! ($?)\n";
    return 1;
  }
  return 0;
};

## Iconv
sub  utf8_to_xml_charset {
  my $input = shift;
  my $chv = Text::Iconv->new("UTF8", "$_XML_CHARSET");
  return $chv->convert($input);
};

## Wir verwenden eine PostgreSQL Service konfiguration um sich mit dem Server zu verbinden.
my $dbc = DBI->connect("dbi:Pg:service=$_PG_USER",'', '',
  {AutoCommit => 0, RaiseError => 1, PrintError => 1, ReadOnly => 1});

## Lese die SQL Abfrage aus Datei ...
my $_statement = "";
open(FH, '<:encoding(UTF-8)', $_SQL_QUERY) or die $!;
while(<FH>){
  $_statement .= $_;
}
close(FH);

my $query = $dbc->prepare($_statement);
if(!defined $query) {
  print "SQL-Connection error!\n";
  exit(1);
}

$query->execute();
my $ref = $query->fetchall_arrayref({});
$query->finish;

if($query->rows < 1)
{
  print "SQL-Query: Nothing todo!\n";
  $dbc->disconnect;
  exit(0);
}

## Erstelle den XML Update Request
my $doc = new XML::LibXML->createDocument("1.0","$_XML_CHARSET");
## Wir verwenden version 1.0 beim Update Request!
my $root = $doc->createElement("inventoryUpdateRequest");
$root->setAttribute("version","1.0");
$doc->setDocumentElement($root);
## Anmeldeknoten
my $action = $doc->createElement("action");
$action->setAttribute("name","bookupdate");
## API Benutzer
my $username = $doc->createElement("username");
$username->appendChild($doc->createTextNode($_API_USER));
$action->appendChild($username);
## API Key
my $apikey = $doc->createElement("password");
$apikey->appendChild($doc->createTextNode($_API_KEY));
$action->appendChild($apikey);
$root->appendChild($action);

=begin childNode()
  Einfacher Knoten nur mit einem TextNode erstellen.
=cut
sub childNode {
  my $name = shift;
  my $value = utf8_to_xml_charset(shift);
  my $child = $doc->createElement($name);
  $child->appendChild($doc->createTextNode($value));
  return $child;
};

=begin childAttributeNode()
  Einfacher Konten mit einem TextNode und einem AttributeNode erstellen.
=cut
sub childAttributeNode {
  my $name = shift;
  my $value = utf8_to_xml_charset(shift);
  my $attr = shift;
  my $avalue = utf8_to_xml_charset(shift);
  my $child = $doc->createElement($name);
  $child->setAttribute($attr,$avalue);
  $child->appendChild($doc->createTextNode($value));
  return $child;
};

## Erstelle die Updateliste
my $booklist = $doc->createElement("AbebookList");
$root->appendChild($booklist);

## Durchlaufe das Abfrageergebnis
foreach my $row (@{$ref}) {
  ## Eintrag
  my $book = $doc->createElement("Abebook");
  $booklist->appendChild($book);

  ## Update type
  $book->appendChild(childNode("transactionType","UPDATE"));

  ## Artikel Nummer
  $book->appendChild(childNode("vendorBookID",$row->{vendorbookid}));

  ## Buch oder Drucke etc.
  $book->appendChild(childNode("productType","Buch"));

  ## Buchbestand Zahl
  $book->appendChild(childNode("quantity",$row->{quantity}));

  ## Autor
  if($row->{author}) {
    $book->appendChild(childNode("author",$row->{author}));
  }

  ## Buchtitel
  if($row->{title}) {
    $book->appendChild(childNode("title",$row->{title}));
  }

  ## Verlag
  if($row->{publisher}) {
    $book->appendChild(childNode("publisher",$row->{publisher}));
  }

  ## Erscheinungsjahr
  if($row->{year}) {
    $book->appendChild(childNode("publishYear",$row->{year}));
  }

  ## Preis im double Format
  if($row->{price}) {
    $book->appendChild(childAttributeNode("price",$row->{price},"currency","EUR"));
  }

  ## Auflage
  if($row->{edition}) {
    $book->appendChild(childNode("edition","$row->{edition}. Auflage"));
  }

  ## Schlüsselwörter
  if($row->{subject}) {
    $book->appendChild(childNode("subject",$row->{subject}));
  }

  ## Umschlags Beschreibung
  if($row->{bindingtext}) {
    $book->appendChild(childNode("bindingText",$row->{bindingtext}));
  }

  ## Buchzustand
  if($row->{bookcondition}) {
    $book->appendChild(childNode("bookCondition",$row->{bookcondition}));
  }

  ## Umschlagszustand
  if($row->{jacketcondition}) {
    $book->appendChild(childNode("jacketCondition",$row->{jacketcondition}));
  }

  ## Bindung {hard,soft} Beschreibung z.B.: Leinen gebunden
  if($row->{bind} && $row->{bind_attr}) {
    $book->appendChild(childAttributeNode(
        "binding",$row->{bind},
        "type",$row->{bind_attr})
    );
  }

  ## Signatur
  if($row->{inscriptiontype}) {
    $book->appendChild(childNode("inscriptionType",$row->{inscriptiontype}));
  }

  ## ISBN
  if($row->{isbn}) {
    $book->appendChild(childNode("isbn",$row->{isbn}));
  }

  ## Eigener Katalog
  if($row->{vendorcatalog1}) {
    $book->appendChild(childNode("booksellerCatalogue",$row->{vendorcatalog1}));
  }

  ## Buch Komplettbeschreibung
  if($row->{description}) {
    $book->appendChild(childNode("description",$row->{description}));
  }

  ## Bilder
  if($row->{picture}) {
    my $pictures = $doc->createElement("pictureList");
    $pictures->appendChild(childNode("pictureURL","$_PICTURE_URL/$row->{picture}"));
    $book->appendChild($pictures);
  }

}

## Datenbank verbindung trennen
$dbc->disconnect;

## Sende den XML Update Katalog an den Updateserver
if (postUpdate($doc->toString(0)) == 0) {
  print "Update successfully.\n";
  $doc->toFile("${_OUTPUT_DIR}/${_APPL_NAME}.xml", 1);
  exit(0);
}

##
## EOF
##
