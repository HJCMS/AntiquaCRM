#!/usr/bin/env perl
# -*- coding: utf-8 -*-
# vim: set fileencoding=utf-8
##################################################################################
# This file is part of the HJCMS Project
#
# Copyright (C) Juergen Heinemann http://www.hjcms.de, (C) 2007-2022
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.
##################################################################################

use strict;
use warnings;
use POSIX qw(strftime);
use Directory::Iterator;
use File::Basename;
use File::Copy;
use File::Glob qw(:globally :nocase);
use MIME::Base64 qw(encode_base64);
use Image::Magick;

binmode STDOUT, ":utf8";

my $HOMEDIR = $ENV{"HOME"};
## Standard Bilder Verzeichnis
my $IMAGES_DIR = "$HOMEDIR/Developement/antiqua/database/tmp/Archiv/Bilder";

## Lese neue Bilder von ...
my $IMAGES_SCAN_DIR = "$IMAGES_DIR/latest";

## Das Ziel Verzeichnis wird mit set_source_target erzeugt!
my $IMAGES_DEST_DIR = "";

## Temporäres Zip-Verzeichnis
my $TEMP_DIR = "$HOMEDIR/.cache/antiqua-images";

## Fertige Zipdatei kommt hierhin ...
my $ZIP_TARGET = "$HOMEDIR/Developement/antiqua/database/tmp/Archiv/Zipped";

## Erstelle Temporären Zip Ordner
system("mkdir -p $TEMP_DIR");

## Alte Zip Export datei entfernen
system("rm -f $ZIP_TARGET/bilder.zip");

sub set_source_target {
  my $_datestr = strftime "%Y%m%d", localtime();
  my $_destdir = sprintf("%s/%s", $IMAGES_DIR, $_datestr);
  if (-e $IMAGES_DIR) {
    mkdir ($_destdir);
    if(-e $_destdir) {
      return $_destdir;
    } else {
      exit(1);
    }
  } else {
    printf "Fatal: Directory ($IMAGES_DIR) not exists!\n";
    exit(1);
  }
}

sub create_zip_export {
  my $it = Directory::Iterator->new($IMAGES_SCAN_DIR, show_dotfiles=>0, recursive=>0, show_directories=>0);
  while (my $file = <$it>) {
    my $_f = basename($file);
    if ($_f =~ qr/^\d{1,8}\.jp[e]*g$/i) {
      $_f =~ s/\.jp[e]*g$//g;
      my $_t = sprintf ("%d.JPG", int($_f));
      copy ("${file}", "${TEMP_DIR}/${_t}");
      move ("${file}", "$IMAGES_DEST_DIR/");
    }
  }
}

## Erstelle Quellen Ziel Verzeichnis
$IMAGES_DEST_DIR = set_source_target();
if(-e $IMAGES_DEST_DIR) {
  create_zip_export();
  chdir (${TEMP_DIR});
  my @images = glob("*.JPG");
  if(@images == 0)
  {
    printf "Zip target, no Images, nothing todo!\n";
    exit(0);
  }
  chmod (0644, @images);
  my @zipcmd = ("zip", "-9", "-q", "-o", "$ZIP_TARGET/bilder.zip", @images);
  system(@zipcmd) == 0 or die "zip failed: $?\n";
  unlink (@images);
} else {
  printf "Build bilder.zip failed!\n";
  exit(1);
}

##EOF
